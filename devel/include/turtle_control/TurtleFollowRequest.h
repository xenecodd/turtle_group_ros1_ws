// Generated by gencpp from file turtle_control/TurtleFollowRequest.msg
// DO NOT EDIT!


#ifndef TURTLE_CONTROL_MESSAGE_TURTLEFOLLOWREQUEST_H
#define TURTLE_CONTROL_MESSAGE_TURTLEFOLLOWREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace turtle_control
{
template <class ContainerAllocator>
struct TurtleFollowRequest_
{
  typedef TurtleFollowRequest_<ContainerAllocator> Type;

  TurtleFollowRequest_()
    : leader()  {
    }
  TurtleFollowRequest_(const ContainerAllocator& _alloc)
    : leader(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _leader_type;
  _leader_type leader;





  typedef boost::shared_ptr< ::turtle_control::TurtleFollowRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtle_control::TurtleFollowRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TurtleFollowRequest_

typedef ::turtle_control::TurtleFollowRequest_<std::allocator<void> > TurtleFollowRequest;

typedef boost::shared_ptr< ::turtle_control::TurtleFollowRequest > TurtleFollowRequestPtr;
typedef boost::shared_ptr< ::turtle_control::TurtleFollowRequest const> TurtleFollowRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtle_control::TurtleFollowRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtle_control::TurtleFollowRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::turtle_control::TurtleFollowRequest_<ContainerAllocator1> & lhs, const ::turtle_control::TurtleFollowRequest_<ContainerAllocator2> & rhs)
{
  return lhs.leader == rhs.leader;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::turtle_control::TurtleFollowRequest_<ContainerAllocator1> & lhs, const ::turtle_control::TurtleFollowRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace turtle_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::turtle_control::TurtleFollowRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtle_control::TurtleFollowRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtle_control::TurtleFollowRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtle_control::TurtleFollowRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtle_control::TurtleFollowRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtle_control::TurtleFollowRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtle_control::TurtleFollowRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6332c8cddb205bea3404e043868fc33b";
  }

  static const char* value(const ::turtle_control::TurtleFollowRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6332c8cddb205beaULL;
  static const uint64_t static_value2 = 0x3404e043868fc33bULL;
};

template<class ContainerAllocator>
struct DataType< ::turtle_control::TurtleFollowRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtle_control/TurtleFollowRequest";
  }

  static const char* value(const ::turtle_control::TurtleFollowRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtle_control::TurtleFollowRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string leader\n"
;
  }

  static const char* value(const ::turtle_control::TurtleFollowRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtle_control::TurtleFollowRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.leader);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TurtleFollowRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtle_control::TurtleFollowRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtle_control::TurtleFollowRequest_<ContainerAllocator>& v)
  {
    s << indent << "leader: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.leader);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLE_CONTROL_MESSAGE_TURTLEFOLLOWREQUEST_H
